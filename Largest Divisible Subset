class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& a) {
        if(a.size()==0 || a.size()==1){
            return a;
        }
        sort(a.begin(), a.end());
        vector<vector<int>>arr(a.size());
        arr[0].push_back(a[0]);
    for(int i=1;i<a.size();i++){
        for(int j=0;j<i;j++){
            if(a[i]>a[j]){
            if((a[i]%a[j]==0) && (arr[i].size()<arr[j].size()+1)){
                arr[i]=arr[j];
            }}else{
              if((a[j]%a[i]==0) && (arr[i].size()<arr[j].size()+1)){
                arr[i]=arr[j];
            }  
            }
            }
        arr[i].push_back(a[i]);
        }
    
        
        vector<int> v1 = arr[0];
          for(vector<int> v : arr){
            for(int i=0;i<v.size();i++){
                cout<<v[i]<<" ";
            }
              cout<<endl;
        }
        cout<<"HI"<<endl;
        for(vector<int> v : arr){
            if(v.size()>=v1.size()){
                v1=v;
            }
        }
        return v1;
    }
};
